<?xml version="1.0" encoding="UTF-8"?>

<!-- Mapper 설정 파일임을 선언하는 영역 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardMapper">
	<!-- 중복되는 쿼리 재사용하기 위한 sql문  -->
	<sql id="boardListSql">
		SELECT  B.NO, 
        		B.TITLE, 
        		M.ID, 
        		B.READCOUNT, 
        		B.ORIGINAL_FILENAME, 
        		B.RENAMED_FILENAME, 
        		B.CONTENT, 
        		B.TYPE,
        		B.CREATE_DATE, 
        		B.MODIFY_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		WHERE B.STATUS = 'Y'
	</sql>

	<!-- resultMap 작성 -->
	<resultMap type="Board" id="boardListResultMap">
		<id property="no" column="NO"/>
		<result property="title" column="TITLE"/>
		<result property="writerId" column="ID"/>
		<result property="readCount" column="RECOUNT"/>
		<result property="originalFileName" column="ORIGINAL_FILENAME"/>
		<result property="renamedFileName" column="RENAMED_FILENAME"/>
		<result property="content" column="CONTENT"/>
		<result property="type" column="TYPE"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
	</resultMap>
	
	<resultMap type="Reply" id="replyResultMap">
	  	<id property="no" column="NO"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="writerId" column="ID"/>
		<result property="content" column="CONTENT"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
    </resultMap>
	
	<!-- 
		1. 쿼리문을 각각 만들어서 하나의 ResultMap에서 매핑하는 방법(게시글 상세 조회)
			- extends 속성 : 다른 resultMap을 상속하는 속성이다.
			- collection 태그는 컬렉션에 해당하는 필드에 조회결과를 매필할 때 사용한다.
			 
				 - property 속성 : 매핑되는 클래스의 필드명
			 	 - javaType 속성 : 어떤 자바 컬렉션 타입인지 명시해준다.
			 	 - select 속성 : 컬렉션을 조회하고자 하는 쿼리문의 id를 적어준다.
			 	 				 조회 결과를 가지고 javaType 속성에서 지정하는 컬렉션 타입으로 지정한 뒤 매핑해준다.
			 	 - column 속성 : 컬렉션을 조회하고자하는 쿼리문에 파라미터를 전달할 때 사용한다.
			 	 
			 * 1:1 관계인 객체를 조회해 오고 싶다면? association 태그를 사용해서 매핑해주면 된다.
			 	<association property="replies" javaType="Reply" select="..."></association>
			 	
	<resultMap type="Board" extends="boardListResultMap" id="boardDetailResultMap">
		<collection property="replies" javaType="arraylist" select="selectRepliesByBoardNo" column="NO"/>
	</resultMap>
	
	<resultMap type="Reply" id="replyResultMap">
		<id property="no" column="NO"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="writerId" column="ID"/>
		<result property="content" column="CONTENT"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
	</resultMap>
	 -->
	 
	 <!-- 
	 	2. 하나의 쿼리문을 만들어서 하나의 ResultMap에서 매핑하는 방법
	 	 		
	  <resultMap type="Board" id="boardDetailResultMap">
	  	<id property="no" column="B_NO"/>
	  	<result property="title" column="B_TITLE"/> 
	  	<result property="writerId" column="B_ID"/> 
	  	<result property="readCount" column="B_READCOUNT"/> 
	  	<result property="originalFileName" column="B_ORIGINAL_FILENAME"/> 
	  	<result property="renamedFileName" column="B_RENAMED_FILENAME"/> 
	  	<result property="content" column="B_CONTENT"/> 
	  	<result property="type" column="B_TYPE"/> 
	  	<result property="createDate" column="B_CREATE_DATE"/> 
	  	<result property="modifyDate" column="B_MODIFY_DATE"/> 	  
	  	<collection property="replies" javaType="arraylist" resultMap="replyResultMap"/>
	  </resultMap>
	
	  <resultMap type="Reply" id="replyResultMap">
	  	<id property="no" column="R_NO"/>
		<result property="boardNo" column="R_BOARD_NO"/>
		<result property="writerId" column="R_ID"/>
		<result property="content" column="R_CONTENT"/>
		<result property="createDate" column="R_CREATE_DATE"/>
		<result property="modifyDate" column="R_MODIFY_DATE"/>
	  </resultMap>
	  -->
	  
	  <resultMap type="Board" extends="boardListResultMap" id="boardDetailResultMap"> 
	  	<collection property="replies" javaType="arraylist" columnPrefix="R_" resultMap="replyResultMap"/>
	  </resultMap>

	<!-- 매핑해준 resultMap를 적어줌 -->
	<!-- 파라미터 값은 없고, 반환값이 resultMap="boardListResultMap"-->
	<!-- parameterType 을 명확하게 넣어주는것이 좋다  -->
	<select id="selectAll" parameterType="map" resultMap="boardListResultMap">
		<!--
			1. 다중 <if>를 활용한 검색 기능 구현 
		SELECT  B.NO, 
				B.TITLE, 
				M.ID, 
				B.READCOUNT, 
				B.ORIGINAL_FILENAME, 
				B.RENAMED_FILENAME, 
				B.CONTENT, 
				B.CREATE_DATE, 
				B.MODIFY_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		WHERE B.STATUS = 'Y'
		<if test="writer != null">		
		  AND M.ID LIKE '%' || #{writer} || '%' 
		</if>
		
		<if test="title != null">
		  AND B.TITLE LIKE '%' || #{title} || '%' 		
		</if>
		
		<if test="content != null">		
		  AND B.CONTENT LIKE '%' || #{content} || '%' 		
		</if>
		 -->
		
		<!-- 
			AND B.STATUS = 'Y'
			다중 <if>를 통해 동적 쿼리문을 만들때 안좋은 예시! 신텍스 에러가 발생한다.
			WHERE 문 다음에 바로 AND가 나올수 있기때문에 에러남
		 -->
		 
		 <!-- 
		 SELECT  B.NO, 
				B.TITLE, 
				M.ID, 
				B.READCOUNT, 
				B.ORIGINAL_FILENAME, 
				B.RENAMED_FILENAME, 
				B.CONTENT, 
				B.CREATE_DATE, 
				B.MODIFY_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		  -->
		  
		<!-- 
		 	2. <where>와 다중 <if>를 활용한 검색 기능 구현 
		 	
		 		- <where>를 사용하면 쿼리문의 시작이 AND나 OR 일 경우 불필요한 AND나 OR를 지워준다.
		 		- 만약 모두 null이라면 전체 데이터가 조회된다.
		 <where>
		 	<if test="writer != null">		
		  		AND M.ID LIKE '%' || #{writer} || '%' 
			</if>
		
			<if test="title != null">
		  		AND B.TITLE LIKE '%' || #{title} || '%' 		
			</if>
		
			<if test="content != null">		
		  		AND B.CONTENT LIKE '%' || #{content} || '%' 		
			</if>
			
			AND B.STATUS = 'Y'
		 </where>
		 -->
		 
		 <!-- 
		 	3. <trim>와 다중 <if>를 활용한 검색 기능 구현
		 	
		 		prefix : 쿼리문 앞에 설정해둔 값이 고정되어 시작한다.
		 		prefixOverrides : 태그 내부에서 실행될 쿼리문 가장 앞의 단어가 설정한 문자와 동일할 경우 문자를 지워줌
		 
		 SELECT  B.NO, 
				B.TITLE, 
				M.ID, 
				B.READCOUNT, 
				B.ORIGINAL_FILENAME, 
				B.RENAMED_FILENAME, 
				B.CONTENT, 
				B.CREATE_DATE, 
				B.MODIFY_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)		
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="writer != null">		
		  		AND M.ID LIKE '%' || #{writer} || '%' 
			</if>
		
			<if test="title != null">
		  		AND B.TITLE LIKE '%' || #{title} || '%' 		
			</if>
		
			<if test="content != null">		
		  		AND B.CONTENT LIKE '%' || #{content} || '%' 		
			</if>
			
			AND B.STATUS = 'Y'
		</trim>
		  -->
		  
		<!-- 
		  4. <choose>, <when>, <otherwise>를 활용한 검색 기능 구현
		  	
		  	<choose> :  주어진 구문에 한가지만 사용하고자 할 때 
		 -->
		 <include refid="boardListSql"/>
		 <choose>
		 <!-- 만족하지 않으면 다음으로 넘어감 -->
		 	<when test="writer != null">
		 	 	AND M.ID LIKE '%' || #{writer} || '%'
		 	</when>
		 	<when test="title != nul">
		 		AND B.TITLE LIKE '%' || #{title} || '%' 
		 	</when>
		 	<when test="content != null">
		 		AND B.CONTENT LIKE '%' || #{content} || '%'
		 	</when>
			<!--
		 	<otherwise>
		 		 위의 조건 중 하나도 만족하지 않는 경우 포함될 쿼리 작성 
		 	</otherwise>
		 	 -->
		 </choose>	 	  
	</select>
	
	<select id="selectBoardListByFilters" parameterType="map" resultMap="boardListResultMap">
		<include refid="boardListSql"/>
		<if test="filters != null">
		<!-- 
			AND B.TYPE IN ('B2', 'B3')
			
			위 결과를 만들기 위해서 foreach 태그를 사용한다.
				- collection : 파라미터로 넘어온 배열의 리스트를 지정한다.
				- item : 배열, 리스트의 각 요소들의 값이 들어가면 변수이다.
				- index : 반복 횟수(0 부터 시작)
				- open : 반복 시작전에 출력할 문자열을 지정한다.
				- clode : 반복 종료전에 출력할 문자열을 지정한다.
				- separator : 반복할 때마다 반복을 구분할 구분자를 지정한다.
		 -->
  		  AND B.TYPE IN
  		  <foreach collection="filters" item="filter" open="(" separator="," close=")">
  		  		#{filter}
  		  </foreach>			
		</if>
	</select>
	
	<!-- 정수값으로 반환 (list나 collection으로 접근) -->
	<select id="getBoardCountByFilters" parameterType="map" resultType="_int">
		SELECT COUNT(*) 
		FROM BOARD 
		WHERE STATUS = 'Y'
  		<if test="list != null">
  		  AND TYPE IN
  		  <foreach collection="list" item="filter" open="(" separator="," close=")">
  		  		#{filter}
  		  </foreach>			
		</if>
	</select>	
	
	<!-- 
		게시글 상세 보기 조회(댓글 포함)
		
		1. 쿼리문을 각각 만들어서 하나의 ResultMap에서 매핑하는 방법
	
	<select id="selectBoardByNo" parameterType="_int" resultMap="boardDetailResultMap">
		<include refid="boardListSql"/>
		AND B.NO = #{no}	
	</select>
	
	<select id="selectRepliesByBoardNo" parameterType="_int" resultMap="replyResultMap">
		SELECT R.NO, 
		       R.BOARD_NO, 
		       R.CONTENT, 
		       M.ID, 
		       R.CREATE_DATE, 
		       R.MODIFY_DATE
		FROM REPLY R
		JOIN MEMBER M ON(R.WRITER_NO = M.NO)
		WHERE R.STATUS ='Y' AND R.BOARD_NO = #{boardNo}
		ORDER BY R.NO DESC
	</select>
	 -->
	
	<!-- 
		2. 하나의 쿼리문을 만들어서 하나의 ResultMap에서 매핑하는 방법
	 -->
	 
	 <select id="selectBoardByNo"  parameterType="_int" resultMap="boardDetailResultMap">
		SELECT B.NO,
		       B.TITLE, 
		       M.ID, 
		       B.READCOUNT, 
		       B.ORIGINAL_FILENAME, 
		       B.RENAMED_FILENAME, 
		       B.CONTENT,
		       B.TYPE,
		       B.CREATE_DATE, 
		       B.MODIFY_DATE,
		       R.NO AS R_NO, 
		       R.BOARD_NO AS R_BOARD_NO, 
		       R.CONTENT AS R_CONTENT, 
		       M2.ID AS R_ID, 
		       R.CREATE_DATE AS R_CREATE_DATE, 
		       R.MODIFY_DATE AS R_MODIFY_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		LEFT OUTER JOIN REPLY R ON(B.NO = R.BOARD_NO)
		LEFT OUTER JOIN MEMBER M2 ON(R.WRITER_NO = M2.NO)
		WHERE B.STATUS='Y' AND B.NO = #{no}
	 </select>
	 
	 <insert id="insertBoard" parameterType="Board"
	 	 useGeneratedKeys="true" keyProperty="no" keyColumn="NO">
	 	INSERT INTO BOARD (
	 		NO, 
	 		WRITER_NO, 
	 		TITLE, 
	 		CONTENT, 
	 		ORIGINAL_FILENAME, 
	 		RENAMED_FILENAME, 
	 		READCOUNT, 
	 		STATUS,
	 		TYPE, 
	 		CREATE_DATE, 
	 		MODIFY_DATE
	 	) VALUES (
	 		SEQ_BOARD_NO.NEXTVAL,
	 		#{writerNo},
	 		#{title},
	 		#{content},
	 		#{originalFileName},
	 		#{renamedFileName},
	 		DEFAULT,
	 		DEFAULT,
	 		DEFAULT,
	 		DEFAULT,
	 		DEFAULT
	 	)
	 </insert>
	 
	 <update id="updateBoard">
	 <!-- 
	 	1. 기존 JDBC에서 사용하던 쿼리를 활용
	 	UPDATE BOARD 
	 	SET 
	 	   	TITLE = #{title},
	 	   	CONTENT = #{content},
	 	   	ORIGINAL_FILENAME = #{originalFileName},
	 	   	RENAMED_FILENAME = #{renamedFileName},
	 	   	MODIFY_DATE = SYSDATE 
	 	WHERE 
	 		NO = #{no}		
	  -->
	  
	  <!-- 
	  	2. 다중 if 구문을 활용
	   UPDATE BOARD 
	 	SET 
	 		<if test="title != null">
	 	   		TITLE = #{title},
	 		</if>
	 		<if test="content != null">
	 	   		CONTENT = #{content},
	 		</if>
	 		<if test="originalFileName != null">
	 	   		ORIGINAL_FILENAME = #{originalFileName},
	 		</if>
	 		<if test="renamedFileName != null">
	 	   		RENAMED_FILENAME = #{renamedFileName},
	 		</if>
	 	   	MODIFY_DATE = SYSDATE 
	 	WHERE 
	 		NO = #{no}
	   -->
	   
	   <!-- 
	   		3. <set>과 다중 <if> 구문을 활용
	    UPDATE BOARD 
	    <set>
	 		<if test="title != null">
	 	   		TITLE = #{title},
	 		</if>
	 		<if test="content != null">
	 	   		CONTENT = #{content},
	 		</if>
	 		<if test="originalFileName != null">
	 	   		ORIGINAL_FILENAME = #{originalFileName},
	 		</if>
	 		<if test="renamedFileName != null">
	 	   		RENAMED_FILENAME = #{renamedFileName},
	 		</if>
	 	   	MODIFY_DATE = SYSDATE 
	    </set>
	 	WHERE 
	 		NO = #{no}
	    -->
	    
	    <!-- 
	    	4. <trim>과 다중 <if>구문을 활용
	     -->
	     UPDATE BOARD 
	    <trim prefix="SET" suffixOverrides=",">
	 		<if test="title != null">
	 	   		TITLE = #{title},
	 		</if>
	 		<if test="content != null">
	 	   		CONTENT = #{content},
	 		</if>
	 		<if test="originalFileName != null">
	 	   		ORIGINAL_FILENAME = #{originalFileName},
	 		</if>
	 		<if test="renamedFileName != null">
	 	   		RENAMED_FILENAME = #{renamedFileName},
	 		</if>
	    </trim>
	 	WHERE 
	 		NO = #{no}
	 </update>
	 
	 <!-- parameterType="map" 넘겨주는 값이 map!  -->
	 <update id="updateStatus" parameterType="map">
	 	UPDATE BOARD 
	 	SET 
	 		STATUS = #{status} 
	 	WHERE 
	 		NO = #{no}
	 </update>
	
	
	
	
	

</mapper>  
<?xml version="1.0" encoding="UTF-8"?>

<!-- Mapper 설정 파일임을 선언하는 영역 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 최상위 mapper 태그안에 쿼리문 작성 -->
<!-- namespace 속성 :  외부에서 mapper에 접근할 수 있는 이름(별칭으로 구분) -->  
<mapper namespace="memberMapper">
	<!-- 
		중복되는 쿼리내용을 재사용하기 위한 SQL 조각으로 사용하려는 태그보다 항상 위에 있어야 한다. 
		<include> 태그를 사용하여 중복쿼리문 사용
	-->
	<sql id="selectMemberSql">
		SELECT NO, 
       		   ID, 
	       	   PASSWORD, 
    	   	   ROLE,
       		   NAME, 
       		   PHONE, 
       		   EMAIL, 
       		   ADDRESS, 
       		   HOBBY, 
       		   STATUS, 
       		   ENROLL_DATE,
       		   MODIFY_DATE
		FROM MEMBER
	</sql>

	<!-- 
		resultMap은 DB의 조회결과와 자바의 클래스(객체)를 명시적으로 매핑해줄 때 사용한다.(JDBC 코드를 줄여주는 역할을 한다.)
			- type 속성 : ResultSet의 결과를 감을 자바 객체의 타입(풀 패키지 클래스명)을 기술한다.( 또는 alias 사용)
			- id 속성 : resultMap의 고유 아이디로 select 문에서 resultMap 속성에 사용하게 된다.		
	-->
	<resultMap type="Member" id="memberResultMap">
		<!-- 
			property :  자바에서 객체의 필드명을 기술, 
			column : DB에서 select 구문에 지정된 컬럼명을 기술   	
		-->
		<!-- 테이블에서 기본 키를 의미(primaryKey) -->
		<id property="no" column="NO"/>
		<!-- 테이블에서 일반 컬럼들을 의미 -->
		<result property="id" column="ID"/>
		<result property="password" column="PASSWORD"/>
		<result property="role" column="ROLE"/>
		<result property="name" column="NAME"/>
		<result property="phone" column="PHONE"/>
		<result property="email" column="EMAIL"/>
		<result property="address" column="ADDRESS"/>
		<result property="hobby" column="HOBBY"/>
		<result property="status" column="STATUS"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
	</resultMap>

	<!-- 
		SELECT 구문 작성시 <select> 태그 사용
			id 속성 :  쿼리문의 고유 아이디
			resultType 속성 : 쿼리 실행 후 조회된 결과값의 자료형 
	 -->
	<select id="selectCount" resultType="_int">
		<!-- 쿼리문 작성시 세미콜론(;)은 없이 작성! -->
		SELECT COUNT(*) FROM MEMBER
	</select>
	
	<!-- 
		쿼리문의 수행 결과가 담긴 Result은 	resultType의 객체에 자동으로 mapping 되어 리턴된다.
		단, 조회 결과의 컬럼명과 자바 클래스에서 필드명이 동일해야 자동으로 mapping이 된다.(대소문자는 구분하지 않음)
		
		1) 쿼리문에서 "as 별칭"으로 조회되는 컬럼명을 변경한다. (유지 보수 문제로 비추천)
		2) resultMap을 이용해서 명시적으로 컬럼명과 변수명을 mapping 시켜준다.(추천)
	 -->
	<select id="selectAll" resultMap="memberResultMap" >
	   <!-- 
	   방법 1)
		SELECT NO, 
       		   ID, 
	       	   PASSWORD, 
    	   	   ROLE,
       		   NAME, 
       		   PHONE, 
       		   EMAIL, 
       		   ADDRESS, 
       		   HOBBY, 
       		   STATUS, 
       		   ENROLL_DATE AS enrollDate, 
       		   MODIFY_DATE AS modifyDate
		FROM MEMBER
    	WHERE STATUS = 'Y'
	    -->
	    <!-- 
	    방법 2)
	     SELECT NO, 
       		   ID, 
	       	   PASSWORD, 
    	   	   ROLE,
       		   NAME, 
       		   PHONE, 
       		   EMAIL, 
       		   ADDRESS, 
       		   HOBBY, 
       		   STATUS, 
       		   ENROLL_DATE,
       		   MODIFY_DATE
		FROM MEMBER
    	WHERE STATUS = 'Y'
	     -->
	     
	     <include refid="selectMemberSql" />
	     WHERE STATUS = 'Y'
	</select>
	
	<!-- 
		외부에서 매개변수로 받는 값이 있으면 해당하는 매개변수의 타입을 지정해야 한다.(parameterType="string")
		외부에서 매개변수로 받은 값은 #{변수명}로 설정해서 값을 가져온다.
	 -->
	<select id="selectMemberById" parameterType="string" resultMap="memberResultMap">
		<include refid="selectMemberSql" />
    	WHERE ID = #{id} AND STATUS = 'Y'
	</select>
	
	<!-- 
		데이터를 insert 한 후 PK 값을 받아오기 위해서 useGeneratedKeys, keyColumn, keyProperty 속성을 추가한다.
	 
	 		- useGeneratedKeys : insert 후에 PK값을 받아올수 있도록 허용하는 속성
	 		- keyColumn : 실제 PK에 해당하는 컬럼 지정
	 		- keyProperty : PK 값이 담길 파라미터 객체의 필드명을 지정하는 속성
	 -->
	
	<!-- config에 별칭을 지정해놔서 Member 이름으로 사용 가능! -->
	<insert id="insertMember" parameterType="Member"
			useGeneratedKeys="true" keyProperty="no"  keyColumn="NO">
		INSERT INTO MEMBER (
			   NO, 
       		   ID, 
	       	   PASSWORD, 
    	   	   ROLE,
       		   NAME, 
       		   PHONE, 
       		   EMAIL, 
       		   ADDRESS, 
       		   HOBBY, 
       		   STATUS, 
       		   ENROLL_DATE,
       		   MODIFY_DATE
       	) VALUES ( <!-- ?에 필드의 이름을 넘겨준다 -->
       		   SEQ_UNO.NEXTVAL,
       		   #{id},
       		   #{password},
       		   DEFAULT,
       		   #{name},
       		   #{phone},
       		   #{email},
       		   #{address},
       		   #{hobby},
       		   DEFAULT,
       		   DEFAULT,
       		   DEFAULT
       		 )  
	</insert>
	
	<update id="updateMember" parameterType="Member">
		UPDATE MEMBER 
		SET 
			NAME = #{name},
			PASSWORD = #{password}, 
			PHONE = #{phone},
			EMAIL = #{email},
			ADDRESS = #{address},
			HOBBY = #{hobby},
			MODIFY_DATE = SYSDATE 
		WHERE NO = #{no}
	</update>
	
	<delete id="deleteMember" parameterType="_int">
		DELETE FROM MEMBER WHERE NO = #{no}
	</delete>
</mapper>
  